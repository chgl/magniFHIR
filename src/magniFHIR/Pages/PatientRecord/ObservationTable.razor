@using Hl7.Fhir.Model

<MudTable Dense="true" Items="@Observations" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info">
    <HeaderContent>
        <MudTh>Issued</MudTh>
        <MudTh>Code</MudTh>
        <MudTh>Value</MudTh>
        <MudTh>Status</MudTh>
        <MudTh>Effective</MudTh>
        <MudTh>Last Updated</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Issued">@context.Issued</MudTd>
        <MudTd DataLabel="Text">
            @if (@context.Code is not null)
            {
                <MudText Typo="Typo.subtitle1">@context.Code.Text</MudText>
                @foreach (var coding in @context.Code.Coding)
                {
                    <MudText Typo="Typo.subtitle2">@coding.System#@coding.Code (@coding.Display)</MudText>
                }
            }
        </MudTd>
        <MudTd DataLabel="Value">@(ObservationValueToDisplay(context.Value) ?? "N/A")</MudTd>
            <MudTd DataLabel="Status">@context.Status</MudTd>
            <MudTd DataLabel="Effective">@context.Effective</MudTd>
            <MudTd DataLabel="LastUpdated">@context.Meta?.LastUpdated</MudTd>
        </RowTemplate>
    </MudTable>

    @code {

    [Parameter]
    public List<Observation>? Observations { get; set; }

    private static string? ObservationValueToDisplay(DataType value)
    {
        if (value is null)
        {
            return null;
        }

        switch (value)
        {
            case Quantity quantity:
                return $"{quantity.Value} {quantity.Unit}";
            case CodeableConcept codeableConcept:
                var codings = string.Join(",", codeableConcept.Coding.Select(coding => $"{coding.System}#{coding.Code}"));
                return $"{codeableConcept.Text} {codings}";
            case FhirString stringValue:
                return stringValue.Value;
            case FhirBoolean booleanValue:
                return booleanValue.ToString();
            case FhirDecimal decimalValue:
                return decimalValue.ToString();
            case Hl7.Fhir.Model.Range rangeValue:
                return $"{rangeValue.Low} - {rangeValue.High}";
            case Ratio ratioValue:
                return $"{ratioValue.Numerator}/{ratioValue.Denominator}";
            case FhirDateTime dateTimeValue:
                return dateTimeValue.ToString();
            case Time timeValue:
                return timeValue.ToString();
            case Integer integerValue:
                return integerValue.ToString();
            case Period periodValue:
                return $"{periodValue.Start} to {periodValue.End}";
            default:
                return $"Unsupported type for display: {value.TypeName}. Please raise an issue on GitHub.";
        }
    }
}
