@using Hl7.Fhir.Model
@using magniFHIR.Config;
@using magniFHIR.Data
@using Hl7.FhirPath;
@using Hl7.Fhir.FhirPath;

@inject IFhirService FhirService
@inject ILogger<ResourceTable> logger
@inject ISnackbar Snackbar

<MudTable Dense="true"
          Hover="true"
          Breakpoint="Breakpoint.Sm"
          LoadingProgressColor="Color.Info"
          ServerData="@(new Func<TableState, Task<TableData<Resource>>>(ServerReload))">
    <HeaderContent>
        @foreach (var column in Config.Columns)
        {
            <MudTh>@column.Header</MudTh>
        }
    </HeaderContent>
    <RowTemplate>
        @foreach (var column in Config.Columns)
        {
            if (column.Header is null || column.Path is null)
            {
                logger.LogWarning("Column header or column path is unset. Ignoring.");
                continue;
            }

            var results = context.Select(column.Path);

            if (results.Count() > 1)
            {
                Snackbar.Add($"FHIRPath expression for column '{column.Header}' returned more than one result element. Only the first one is displayed.", Severity.Warning);
            }

            var result = results.FirstOrDefault();
            switch (result)
            {
                case CodeableConcept codeableConcept:
                    <MudTd>
                        <CodeableConceptChips Concept="codeableConcept"></CodeableConceptChips>
                    </MudTd>
                    break;
                case Code fhirCode:
                    <MudTd>
                        <MudChip Size="Size.Small" Color="Color.Secondary">@fhirCode</MudChip>
                    </MudTd>
                    break;
                case FhirDateTime dateTime:
                    <MudTd>
                        <MudTooltip>
                            <ChildContent>
                                <MudChip Size="Size.Small" Label="true">@dateTime.ToString()</MudChip>
                            </ChildContent>
                            <TooltipContent>
                                <MudText>@dateTime.ToString()</MudText>
                            </TooltipContent>
                        </MudTooltip>
                    </MudTd>
                    break;
                case Id id:
                    var idAsString = id.ToString();
                    if (idAsString is not null)
                    {
                        var truncatedId = idAsString.ToString().Substring(0, Math.Min(idAsString.Length, 8));
                        if (truncatedId.Length < idAsString.Length)
                        {
                            truncatedId += "...";
                        }
                        <MudTd>
                            <MudTooltip>
                                <ChildContent>
                                    <MudText>@truncatedId</MudText>
                                </ChildContent>
                                <TooltipContent>
                                    <MudText>@id</MudText>
                                </TooltipContent>
                            </MudTooltip>
                        </MudTd>
                    }
                    break;
                case Quantity quantity:
                    <MudTd>
                        <MudText>@quantity.Value @quantity.Unit</MudText>
                    </MudTd>
                    break;
                case Ratio ratioValue:
                    <MudTd>
                        <MudText>@ratioValue.Numerator / @ratioValue.Denominator</MudText>
                    </MudTd>
                    break;
                case Period periodValue:
                    <MudTd>
                        <MudText>@periodValue.Start to @periodValue.End</MudText>
                    </MudTd>
                    break;
                case Hl7.Fhir.Model.Range rangeValue:
                    <MudTd>
                        <MudText>@rangeValue.Low to @rangeValue.High</MudText>
                    </MudTd>
                    break;
                // TODO: match on Hl7.Fhir.Model.Code`1[Hl7.Fhir.Model.EventStatus]
                default:
                    <MudTd>@result</MudTd>
                    break;
            }
        }
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager HideRowsPerPage="true" HidePageNumber="true" LastIcon="false" FirstIcon="false" BeforeIcon="false" />
    </PagerContent>
</MudTable>

@code {
    [Parameter] public ResourceBrowserConfig Config { get; set; } = new();
    [Parameter] public ResourceType ResourceType { get; set; }
    [Parameter] public string? PatientId { get; set; }
    [Parameter] public string? FhirServerNameSlug { get; set; }

    public List<Resource> Resources { get; set; } = new();

    private Bundle? currentPage = null;
    private async Task<TableData<Resource>> ServerReload(TableState state)
    {
        if (FhirServerNameSlug is null)
        {
            throw new InvalidOperationException("Requested patient browser without server name set.");
        }

        if (PatientId is null)
        {
            return new TableData<Resource>();
        }

        var bundle = await FhirService.GetResourcesByPatientIdAsync(FhirServerNameSlug, PatientId, ResourceType, currentPage);

        currentPage = bundle;

        var resources = bundle.Entry.Select(entry => entry.Resource).ToList();

        var totalItems = int.MaxValue;
        if (bundle.NextLink is null)
        {
            // if there are no more pages after this one, we disable the next button
            // by setting the totalItems to the number of items returned.
            totalItems = resources.Count;
        }

        return new TableData<Resource>() { Items = resources, TotalItems = totalItems };
    }

    // TODO: use this to implement prettier formatting for values
    private static string? ObservationValueToDisplay(Base value)
    {
        if (value is null)
        {
            return null;
        }

        switch (value)
        {

            case FhirString stringValue:
                return stringValue.Value;
            case FhirBoolean booleanValue:
                return booleanValue.ToString();
            case FhirDecimal decimalValue:
                return decimalValue.ToString();
            case FhirDateTime dateTimeValue:
                return dateTimeValue.ToString();
            case Time timeValue:
                return timeValue.ToString();
            case Integer integerValue:
                return integerValue.ToString();
            default:
                return value.ToString();
        }
    }
}
