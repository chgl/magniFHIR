@inherits LayoutComponentBase
@inject FhirServersOptions ServerOptions

<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start"
                       OnClick="@((e) => DrawerToggle())" />
        <MudSpacer />
        <MudIcon Icon="@Icons.Filled.LocalFireDepartment" Color="Color.Inherit" />
        <MudText Typo="Typo.subtitle1">@connectedFhirServer?.Name</MudText>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">magniFHIR</MudText>
        </MudDrawerHeader>
        <NavMenu FhirServerNameSlug="@FhirServerNameSlug" />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="my-8 pt-8">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {

    bool _drawerOpen = true;

    private bool _isDarkMode;

    private MudThemeProvider? _mudThemeProvider;

    private FhirServerConfig connectedFhirServer;

    private string? FhirServerNameSlug { get; set; }


    [CascadingParameter]
    RouteData? RouteData { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider!.GetSystemPreference();
            StateHasChanged();
        }
    }



    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }



    protected override void OnParametersSet()
    {
        if (RouteData is null)
        {
            return;
        }

        RouteData.RouteValues.TryGetValue(nameof(FhirServerNameSlug), out var slugName);
        FhirServerNameSlug = slugName?.ToString();

        if (FhirServerNameSlug is not null)
        {
            connectedFhirServer = ServerOptions.FindByNameSlug(FhirServerNameSlug);
        }
    }
}
